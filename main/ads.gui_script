local dirtylarry = require "dirtylarry/dirtylarry"

local MAX_LOG_LINES = 10

--log logic
local gprint = print
local log = {}
local text = ""
_G.print = function(...)
    gprint(...)
    local args = {...}
    local num = #log+1
    log[num] = "--"
    for k, v in pairs(args) do
        log[num] = log[num] .. tostring(v) .. " "
    end
    log[num] = log[num] .. "\n"
    text = ""
    if num > MAX_LOG_LINES then
        table.remove(log, 1)
    end
    for k, v in pairs(log) do
        text = text .. v
    end
end

function update()
    gui.set_text(gui.get_node("console"), text)
end
-- end log logic

local function update_ui(self)
    gui.set_enabled(gui.get_node("inited"), self.initialized)
    gui.set_enabled(gui.get_node("initialization/larrybutton"), not self.initialized)
    if self.ad_type then
        gui.set_enabled(gui.get_node("load_ad/larrybutton"), true)
        gui.set_enabled(gui.get_node("hide_ad/larrybutton"), false)
        gui.set_enabled(gui.get_node("unload_ad/larrybutton"), false)
        if self.ad_type == admob.MSG_INTERSTITIAL then
            gui.set_enabled(gui.get_node("show_ad/larrybutton"), admob.is_interstitial_loaded())
        elseif self.ad_type == admob.MSG_REWARDED then
            gui.set_enabled(gui.get_node("show_ad/larrybutton"), admob.is_rewarded_loaded())
        elseif self.ad_type == admob.MSG_BANNER then
            local is_banner_loaded = admob.is_banner_loaded()
            gui.set_enabled(gui.get_node("show_ad/larrybutton"), is_banner_loaded)
            gui.set_enabled(gui.get_node("hide_ad/larrybutton"), is_banner_loaded)
            gui.set_enabled(gui.get_node("unload_ad/larrybutton"), is_banner_loaded)
        end
    else
        gui.set_enabled(gui.get_node("load_ad/larrybutton"), false)
        gui.set_enabled(gui.get_node("show_ad/larrybutton"), false)
        gui.set_enabled(gui.get_node("hide_ad/larrybutton"), false)
    end
end

local function admob_callback(self, message_id, message)
    pprint(message_id, message)
    if message_id == admob.MSG_INITIALIZATION then
        print("MSG_INITIALIZATION")
        self.initialized = true
    elseif message_id == admob.MSG_INTERSTITIAL then
        if message.event == admob.EVENT_CLOSED then
            print("EVENT_CLOSED: Interstitial AD closed")
        elseif message.event == admob.EVENT_FAILED_TO_SHOW then
            print("EVENT_FAILED_TO_SHOW: Interstitial AD failed to show\nCode: "..message.code.."\nError: "..message.error)
        elseif message.event == admob.EVENT_OPENING then
            -- on android this event fire only when ADS activity closed =(
            print("EVENT_OPENING: Interstitial AD is opening")
        elseif message.event == admob.EVENT_FAILED_TO_LOAD then
            print("EVENT_FAILED_TO_LOAD: Interstitial AD failed to load\nCode: "..message.code.."\nError: "..message.error)
        elseif message.event == admob.EVENT_LOADED then
            print("EVENT_LOADED: Interstitial AD loaded")
        elseif message.event == admob.EVENT_NOT_LOADED then
            print("EVENT_NOT_LOADED: can't call show_interstitial() before EVENT_LOADED\nError: "..message.error)
        end
    elseif message_id == admob.MSG_REWARDED then
        if message.event == admob.EVENT_CLOSED then
            print("EVENT_CLOSED: Rewarded AD closed")
        elseif message.event == admob.EVENT_FAILED_TO_SHOW then
            print("EVENT_FAILED_TO_SHOW: Rewarded AD failed to show\nCode: "..message.code.."\nError: "..message.error)
        elseif message.event == admob.EVENT_OPENING then
            -- on android this event fire only when ADS activity closed =(
            print("EVENT_OPENING: Rewarded AD is opening")
        elseif message.event == admob.EVENT_FAILED_TO_LOAD then
            print("EVENT_FAILED_TO_LOAD: Rewarded AD failed to load\nCode: "..message.code.."\nError: "..message.error)
        elseif message.event == admob.EVENT_LOADED then
            print("EVENT_LOADED: Rewarded AD loaded")
        elseif message.event == admob.EVENT_NOT_LOADED then
            print("EVENT_NOT_LOADED: can't call show_rewarded() before EVENT_LOADED\nError: "..message.error)
        elseif message.event == admob.EVENT_EARNED_REWARD then
            print("EVENT_EARNED_REWARD: Reward: " .. tostring(message.amount) .. " " .. tostring(message.type))
        end
    elseif message_id == admob.MSG_BANNER then
        if message.event == admob.EVENT_LOADED then
            print("EVENT_LOADED: Banner AD loaded")
        elseif message.event == admob.EVENT_OPENING then
            print("EVENT_OPENING: Banner AD is opening")
        elseif message.event == admob.EVENT_FAILED_TO_LOAD then
            print("EVENT_FAILED_TO_LOAD: Banner AD failed to load\nCode: "..message.code.."\nError: "..message.error)
        elseif message.event == admob.EVENT_CLICKED then
            print("EVENT_CLICKED: Banner AD loaded")
        elseif message.event == admob.EVENT_CLOSED then
            print("EVENT_CLOSED: Banner AD closed")
        elseif message.event == admob.EVENT_UNLOADED then
            print("EVENT_UNLOADED: Banner AD unloaded")
        end
    end
    update_ui(self)
end

function init(self)
    msg.post(".", "acquire_input_focus")
    
    if sys.get_sys_info().system_name == 'iPhone OS' then
        -- https://developers.google.com/admob/ios/test-ads
        self.banner_ad_unit = "ca-app-pub-3940256099942544/2934735716"
        self.interstitial_ad_unit = "ca-app-pub-3940256099942544/4411468910"
        self.rewardedvideo_ad_unit = "ca-app-pub-3940256099942544/1712485313"
    else
        -- From https://developers.google.com/admob/android/test-ads
        self.banner_ad_unit = "ca-app-pub-3940256099942544/6300978111"
        self.interstitial_ad_unit = "ca-app-pub-3940256099942544/1033173712"
        self.rewardedvideo_ad_unit = "ca-app-pub-3940256099942544/5224354917"
    end

    if admob then
        admob.set_callback(admob_callback)
    end
    update_ui(self)
end

function on_input(self, action_id, action)
    if not admob then
        return
    end
    
    local prev_type = self.ad_type

    dirtylarry:button("initialization", action_id, action, function ()
        admob.initialize()
    end)
    
    self.ad_type = dirtylarry:radio("ad_type_interstitial", action_id, action, admob.MSG_INTERSTITIAL, self.ad_type)
    self.ad_type = dirtylarry:radio("ad_type_rewarded", action_id, action, admob.MSG_REWARDED, self.ad_type)
    self.ad_type = dirtylarry:radio("ad_type_banner", action_id, action, admob.MSG_BANNER, self.ad_type)
    
    if prev_type ~= self.ad_type then
        update_ui(self)
    end
    
    dirtylarry:button("load_ad", action_id, action, function ()
        if self.ad_type == 0 then
        elseif self.ad_type == admob.MSG_INTERSTITIAL then
            print("admob.load_interstitial()")
            admob.load_interstitial(self.interstitial_ad_unit)
        elseif self.ad_type == admob.MSG_REWARDED then
            print("admob.load_rewarded()")
            admob.load_rewarded(self.rewardedvideo_ad_unit)
        elseif self.ad_type == admob.MSG_BANNER then
            print("admob.load_banner()")
            admob.load_banner(self.banner_ad_unit) --2nd parameter sizes
        end
    end)

    dirtylarry:button("show_ad", action_id, action, function ()
        if self.ad_type == 0 then
        elseif self.ad_type == admob.MSG_INTERSTITIAL then
            print("admob.show_interstitial()")
            admob.show_interstitial()
        elseif self.ad_type == admob.MSG_REWARDED then
            print("admob.show_rewarded()")
            admob.show_rewarded()
        elseif self.ad_type == admob.MSG_BANNER then
            print("admob.show_banner()")
            admob.show_banner()
        end
    end)

    dirtylarry:button("hide_ad", action_id, action, function ()
        if self.ad_type == admob.MSG_BANNER then
            print("admob.hide_banner()")
            admob.hide_banner()
        end
    end)

    dirtylarry:button("unload_ad", action_id, action, function ()
        if self.ad_type == admob.MSG_BANNER then
            print("admob.unload_banner()")
            admob.unload_banner()
        end
    end)

end

